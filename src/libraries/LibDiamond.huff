/// @title LibDiamond
/// @notice SPDX-License-Identifier: MIT
/// @author Benoit S <https://github.com/BenoitSoloch>

#include "./LibStorage.huff"

/* Functions */
#define function setContractOwner(address) payable returns()
#define function contractOwner() view returns(address)
#define function testArgs(address, bytes4[]) view returns()

/* Events */
#define event OwnershipTransferred(address indexed, address indexed)

/* Errors */
#define error NotContractOwner()
#define error NoBytecodeAtAddress()

//TODO: Modify this function to internal after verifying tests
#define macro SET_CONTRACT_OWNER() = takes(0) returns(0) {
    0x04 calldataload                   // [ newOwnerAddr ]
    dup1

    [DIAMOND_STORAGE_POSITION] [DIAMOND_STORAGE_OWNER_OFFSET] add sload    // [ previousOwnerAddr, newOwnerAddr ]
    dup2                                // [ newOwnerAddr, previousOwnerAddr, newOwnerAddr ]
    _SET_CONTRACT_OWNER()               // [ previousOwnerAddr, newOwnerAddr ]
    __EVENT_HASH(OwnershipTransferred)  // [ eventHash, previousOwnerAddr, newOwnerAddr ]
    LOG_STACK_3(0x00)
    //Todo Check why log3 crash
    //log3
}

#define macro CONTRACT_OWNER() = takes(0) returns(0) {
    _GET_CONTRACT_OWNER()
    push0 mstore
    0x20 push0 return
}

#define macro _ENFORCE_IS_CONTRACT_OWNER() = takes(0) returns(0) {
    _GET_CONTRACT_OWNER()               // [ contractOwner ]
    caller                              // [ msgSender, contractOwner ]
    dup2 dup2                           // [ msgSender, contractOwner, msgSender, contractOwner ]
    eq continue jumpi                   // [ msgSender, contractOwner ]

    __ERROR(NotContractOwner)           // [ errorHash, msgSender, contractOwner ]
    0x00 mstore                         // [ msgSender, contractOwner ]
    0x04 mstore                         // [ contractOwner ]
    0x24 mstore                         // [ ]
    0x44 0x00 revert

    continue:
}

#define macro _ENFORCE_HAS_CONTRACT_CODE() = takes(4) returns(0) {
    // [ contractAddress, messageLen, messagePart1, messagePart2]

    __RIGHTPAD(0x434F4E545241435420434F4445) 0x00 mstore
    [CYAN] 0x20 mstore
    LOG_MEMORY_AS_STRING_STYLE(0x00, 0x0d, 0x40, 0x20)
    LOG_STACK_4(0x00)

    dup1                                // [ ccontractAddress, contractAddress, messageLen, messagePart1, messagePart2 ]
    extcodesize                         // [ codeSize, contractAddress, messageLen, messagePart1, messagePart2 ]
    push0                               // [ 0, codeSize, contractAddress, messageLen, messagePart1, messagePart2 ]
    lt continue jumpi

    __ERROR(NoBytecodeAtAddress)        // [ errorHash, contractAddress, messageLen, messagePart1, messagePart2 ]
    0x00 mstore                         // [ contractAddress, messageLen, messagePart1, messagePart2 ]
    0x04 mstore                         // [ messageLen, messagePart1, messagePart2 ]
    0x40                                // [ messageOffset, messageLen, messagePart1, messagePart2 ]
    0x24 mstore                         // [ messageLen, messagePart1, messagePart2 ]
    0x44 mstore                         // [ errorMessagePart1, messagePart2 ]
    0x64 mstore                         // [ messagePart2 ]
    0x84 mstore                         // [ ]

    0xa4 0x00 revert

    continue:
    pop pop pop pop pop pop
}

#define macro ADD_FUNCTIONS() = takes(1) returns(1) {
    0x04 calldataload                // [ address ]
    dup1 0x00 eq iszero continue_add_jump jumpi
    //TODO: Revert
    0x00 0x00 revert

    continue_add_jump:
    _GET_SELECTORS_LEN()            // [ selectors_count, address ]

    // "LibDiamondCut: _init address has no code:" message
    __RIGHTPAD(0x636F6465)                                              // [ msg_part2, selectors_count, address ]
    0x4C69624469616D6F6E644375743A2041646420666163657420686173206E6F20  // [ msg_part1, msg_part2, selectors_count, address ]
    0x48                                                                // [ len, msg_part1, msg_part2, selectors_count, address ]
    dup5                                                                // [ address, len, msg_part1, msg_part2, selectors_count, address ]
    _ENFORCE_HAS_CONTRACT_CODE()                                        // [ selectors_count, address ]

    0x24 calldataload                // [ arr_offset, selectors_count, address ]
    dup1 0x04 add calldataload       // [ arr_len, selectors_count, address ]

    dup1 0x00 eq jump_add_end jumpi      // [ arr_len, selectors_count, address ]

    0x00
    loop_read:
        //bytes4 selector = _functionSelectors[selectorIndex];
        dup1 0x20 mul 0x64 add calldataload    // [ selector, id, arr_len, selectors_count, address ]
        //address oldFacetAddress = ds.facetAddressAndSelectorPosition[selector].facetAddress;
        dup1 _GET_FACET_ADDRESS_VALUE()            // [ oldFacetAddress, selector, id, arr_len, selectors_count, address ]
        0x00 eq iszero continue_add_loop jumpi
        //TODO: Revert
        //revert CannotAddFunctionToDiamondThatAlreadyExists(selector);
        0x00 0x00 revert

        continue_add_loop:                          // [ selector, id, arr_len, selectors_count, address ]
        dup4 dup6                               // [ address, selectors_count, selector, id, arr_len, selectors_count, address ]
        _CREATE_FACET_STRUCT()                  // [ struct_value, selector, id, arr_len, selectors_count, address ]
        dup2                                    // [ selector, struct_value, selector, id, arr_len, selectors_count, address ]
        _SET_FACET_ITEM()                       // [ selector, id, arr_len, selectors_count, address ]
        _PUSH_SELECTORS_ITEM()                  // [ id, arr_len, selectors_count, address ]
        swap2 0x01 add swap2                    // [ id, arr_len, selectors_count++, address ]
        0x01 add                                // [ id++, arr_len, selectors_count++, address ]
        dup2 dup2 lt loop_read jumpi

    jump_add_end:
    //TODO: pop stack items
}

#define macro REPLACE_FUNCTIONS() = takes(1) returns(1) {
    0x04 calldataload                       // [ address ]
    dup1 0x00 eq revert_rep_addr_facet_zero jumpi

    // "LibDiamondCut: _init address has no code:" message
    __RIGHTPAD(0x206E6F20636F6465)                                      // [ msg_part2, selectors_count, address ]
    0x4C69624469616D6F6E644375743A205265706C61636520666163657420686173  // [ msg_part1, msg_part2, selectors_count, address ]
    0x50                                                                // [ len, msg_part1, msg_part2, selectors_count, address ]
    dup5                                                                // [ address, len, msg_part1, msg_part2, selectors_count, address ]
    _ENFORCE_HAS_CONTRACT_CODE()                                        // [ selectors_count, address ]

    0x24 calldataload                              // [ arr_offset, selectors_count, address ]
    dup1 0x04 add calldataload                     // [ arr_len, selectors_count, address ]
    dup1 0x00 eq jump_replace_end jumpi            // [ arr_len, selectors_count, address ]

    0x00                                           // [ id, arr_len, selectors_count, address ]
    loop_rep_read:
        dup1 0x20 mul 0x64 add calldataload        // [ selector, id, arr_len, selectors_count, address ]
        dup1 _GET_FACET_ADDRESS_VALUE()            // [ oldFacetAddress, selector, id, arr_len, selectors_count, address ]

        dup1 address eq revert_rep_addr_this jumpi  // [ selector, id, arr_len, selectors_count, address ]
        dup1 0x00 eq revert_rep_addr_zero jumpi     // [ selector, id, arr_len, selectors_count, address ]
        0x00 eq revert_rep_addr_facet jumpi         // [ selector, id, arr_len, selectors_count, address ]

        // TODO address replace
        dup1 _GET_FACET_ITEM()                      // [ facet_struct, selector, id, arr_len, selectors_count, address ]
        0xffffffffffffffffffffffff 0xa0 shl and     // [ masked_facet_struct, selector, id, arr_len, selectors_count, address ]
        dup6 or swap1                               // [ selector, updated_facet_struct, id, arr_len, selectors_count, address ]
        _SET_FACET_ITEM()                           // [ id, arr_len, selectors_count, address ]
        0x01 add                                // [ id++, arr_len, selectors_count++, address ]
        dup2 dup2 lt loop_rep_read jumpi

    jump_replace_end jump                       // [ id, arr_len, selectors_count, address ]

    revert_rep_addr_facet_zero:
        //TODO: Revert
            //revert CannotReplaceFunctionsFromFacetWithZeroAddress(_functionSelectors);
        0x00 0x00 revert

    revert_rep_addr_zero:
        //TODO: Revert
            //revert CannotReplaceFunctionThatDoesNotExists(selector);
        0x00 0x00 revert

    revert_rep_addr_this:
        //TODO: Revert
            //revert CannotReplaceImmutableFunction(selector);
        0x00 0x00 revert

    revert_rep_addr_facet:
        //TODO: Revert
            //revert CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(selector);
        0x00 0x00 revert

    jump_replace_end:
        //TODO: pop stack items
}

#define macro REMOVE_FUNCTIONS() = takes(1) returns(1) {
    0x04 calldataload                       // [ address ]
    dup1 0x00 eq revert_rem_addr_facet_zero jumpi

    _GET_SELECTORS_LEN()                    // [ selectors_count, address ]

    revert_rem_addr_facet_zero:
    //TODO: Revert
        //revert RemoveFacetAddressMustBeZeroAddress(_facetAddress);
    0x00 0x00 revert

    0x24 calldataload                               // [ arr_offset, selectors_count, address ]
    dup1 0x04 add calldataload                      // [ arr_len, selectors_count, address ]
    dup1 0x00 eq jump_remove_end jumpi              // [ arr_len, selectors_count, address ]

    0x00                                            // [ id, arr_len, selectors_count, address ]
    loop_rem_read:
        dup1 0x20 mul 0x64 add calldataload         // [ selector, id, arr_len, selectors_count, address ]
        dup1 _GET_FACET_ITEM()                      // [ old_facet_value, selector, id, arr_len, selectors_count, address ]
        dup1 0xffffffffffffffffffffffff 0xa0 shl not and        // [ old_facet_addr, old_facet_value, selector, id, arr_len, selectors_count, address ]

        dup1 address eq revert_rem_addr_this jumpi  // [ old_facet_addr, old_facet_value, selector, id, arr_len, selectors_count, address ]
        0x00 eq revert_rem_addr_zero jumpi          // [ old_facet_value, selector, id, arr_len, selectors_count, address ]
        swap4 0x01 swap1 sub swap4                  // [ old_facet_value, selector, id, arr_len, selectors_count--, address ]

        dup1 0xa0 shr                               // [ old_facet_selector, old_facet_value, selector, id, arr_len, selectors_count--, address ]
        dup6 dup2 eq continue_rem_loop jumpi

        dup6 _GET_SELECTORS_ITEM_AT()                  // [ lastSelector, old_facet_selector, old_facet_value, selector, id, arr_len, selectors_count--, address ]
        dup1 dup3                                      // [ old_facet_selector, lastSelector, lastSelector, old_facet_selector, old_facet_value, selector, id, arr_len, selectors_count--, address ]
        _SET_SELECTORS_ITEM_AT()                       // [ lastSelector, old_facet_selector, old_facet_value, selector, id, arr_len, selectors_count--, address ]
        _MODIFY_FACET_SELECTOR_AT()                    // [ old_facet_value, selector, id, arr_len, selectors_count--, address ]
        pop                                            // [ selector, id, arr_len, selectors_count--, address ]

        continue_rem_loop:
        _POP_SELECTORS_ITEM()                          // [ selector, id, arr_len, selectors_count--, address ]
        _DELETE_FACET_STRUCT_AT()                      // [ id, arr_len, selectors_count--, address ]

        dup2 dup2 lt loop_rem_read jumpi

    jump_end_rem_loop jump

    revert_rem_addr_this:
        //TODO: Revert
            //CannotRemoveFunctionThatDoesNotExist(selector);
        0x00 0x00 revert
    revert_rem_addr_zero:
        //TODO: Revert
            //CannotRemoveImmutableFunction(selector);
        0x00 0x00 revert

    jump_end_rem_loop:
        pop
    jump_remove_end:
        pop pop pop
}

#define macro _LIB_DIAMOND_CUT() = takes(0) returns(0) {
    //TODO: IMPLEMENTING THE FUNCTION
}

#define macro INITIALIZE_DIAMOND_CUT() = takes(0) returns(0) {
    0x04 calldataload                                                   // [ _init ]
    dup1 eq push0 jump_end jumpi                                        // [ _init ]

    // "LibDiamondCut: _init address has no code:" message
    __RIGHTPAD(0x206E6F20636F6465)                                      // [ msg_part2, _init ]
    0x4C69624469616D6F6E644375743A205F696E6974206164647265737320686173  // [ msg_part1, msg_part2, _init ]
    0x51                                                                // [ len, msg_part1, msg_part2, _init ]
    dup4                                                                // [ _init, len, msg_part1, msg_part2, _init ]
    _ENFORCE_HAS_CONTRACT_CODE()

    0x00 0x00                                       // [ retOffset, retSize, _init ]
    0x24 calldataload                               // [ argOffset, retOffset, retSize, _init ]
    dup1 0x04 add calldataload                      // [ argSize, argOffset, retOffset, retSize, _init ]
    // TODO: Put datas in memory

    dup6 0xffff                                     // [ gas, address, argSize, argOffset, retOffset, retSize, _init ]
    delegatecall                                    // [ success, _init ]
    0x01 eq jump_end jumpi

    // TODO: Finish this function

    jump_end:
}

#define macro TEST_ARGS() = takes(1) returns(1) {
    __RIGHTPAD(0x544553542041524753) 0x00 mstore
    [MAGENTA] 0x20 mstore
    LOG_MEMORY_AS_STRING_STYLE(0x00, 0x09, 0x40, 0x20)

    LOG_CALLDATA(0x04, 0xE0, 0x00)
}

#define macro TEST_ARGS2() = takes(1) returns(1) {
    __RIGHTPAD(0x544553542041524753) 0x00 mstore
    [MAGENTA] 0x20 mstore
    LOG_MEMORY_AS_STRING_STYLE(0x00, 0x09, 0x40, 0x20)

    LOG_CALLDATA(0x04, 0xE0, 0x00)
}

#define macro LIB_MAIN() = takes(1) returns(1) {
    __RIGHTPAD(0x4C4942204D41494E2053454C4543544F523A) 0x00 mstore
    [CYAN] 0x20 mstore
    LOG_MEMORY_AS_STRING_STYLE(0x00, 0x12, 0x40, 0x20)
    LOG_STACK_1(0x00)

    dup1 __FUNC_SIG(setContractOwner)   eq setContractOwnerJump jumpi
    dup1 __FUNC_SIG(contractOwner)      eq contractOwnerJump jumpi

    noMatch jump

    setContractOwnerJump:
        SET_CONTRACT_OWNER()
    contractOwnerJump:
        CONTRACT_OWNER()

    stop

    noMatch:
}